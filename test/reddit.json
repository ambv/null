{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"domain": "books.dzone.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i7ul8", "clicked": false, "author": "gst", "media": null, "score": 9, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 0, "is_self": false, "permalink": "/r/Python/comments/i7ul8/a_review_of_programming_python_4th_edition/", "name": "t3_i7ul8", "created": 1308920161.0, "url": "http://books.dzone.com/reviews/review-programming-python-4th", "title": "A Review of Programming Python 4th Edition ", "created_utc": 1308894961.0, "num_comments": 0, "ups": 9}}, {"kind": "t3", "data": {"domain": "groups.google.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i7uj9", "clicked": false, "author": "gst", "media": null, "score": 9, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 2, "is_self": false, "permalink": "/r/Python/comments/i7uj9/ann_ets_40_released_this_is_the_first_major/", "name": "t3_i7uj9", "created": 1308920020.0, "url": "http://groups.google.com/group/comp.lang.python.announce/browse_thread/thread/8bc4c0b28a15c52c/e473d6630ab8f213?show_docid=e473d6630ab8f213", "title": "ANN: ETS 4.0 released -  This is the\nfirst major release of the Enthought Tool Suite in almost\nthree years. ", "created_utc": 1308894820.0, "num_comments": 0, "ups": 11}}, {"kind": "t3", "data": {"domain": "self.Python", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A couple weeks ago on /r/programming or /r/python (can't find the thread), someone linked to a comment talking about how programming languages are taught often more on a theoretical level, and how they observed that people often learn quite good to know all the rules of the language, but never really learn how to really write because they're not challenged to read code to see how things can be used in the wild, so to say. They compared this to challenges facing ESL speakers who (and this is true of any language, in my experience) learn the morphological rules and syntax to a language well, but never really learn to write say, whole paragraphs or essays, but just for lack of getting the proper input.&lt;/p&gt;\n\n&lt;p&gt;I've read a bit through Django's source when looking for how to do certain things, but are there any projects or programs that anyone remembers as being particularly amazing and worth reading over? I'm a learn-by-seeing person too, so it'd be fun to look over larger works rather than just reading snippets here and there in documentation.&lt;/p&gt;&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "A couple weeks ago on /r/programming or /r/python (can't find the thread), someone linked to a comment talking about how programming languages are taught often more on a theoretical level, and how they observed that people often learn quite good to know all the rules of the language, but never really learn how to really write because they're not challenged to read code to see how things can be used in the wild, so to say. They compared this to challenges facing ESL speakers who (and this is true of any language, in my experience) learn the morphological rules and syntax to a language well, but never really learn to write say, whole paragraphs or essays, but just for lack of getting the proper input.\n\nI've read a bit through Django's source when looking for how to do certain things, but are there any projects or programs that anyone remembers as being particularly amazing and worth reading over? I'm a learn-by-seeing person too, so it'd be fun to look over larger works rather than just reading snippets here and there in documentation. ", "likes": null, "saved": false, "id": "i7ncd", "clicked": false, "author": "pyry", "media": null, "score": 24, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 1, "is_self": true, "permalink": "/r/Python/comments/i7ncd/reading_python_suggestions_for_source_that_is/", "name": "t3_i7ncd", "created": 1308899356.0, "url": "http://www.reddit.com/r/Python/comments/i7ncd/reading_python_suggestions_for_source_that_is/", "title": "Reading Python. Suggestions for source that is worth reading through?", "created_utc": 1308874156.0, "num_comments": 16, "ups": 25}}, {"kind": "t3", "data": {"domain": "dmalcolm.livejournal.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i7uhq", "clicked": false, "author": "gst", "media": null, "score": 8, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 3, "is_self": false, "permalink": "/r/Python/comments/i7uhq/static_analysis_of_cpython_extensions_using_a_new/", "name": "t3_i7uhq", "created": 1308919912.0, "url": "http://dmalcolm.livejournal.com/5931.html", "title": "Static analysis of CPython extensions, using a new GCC plugin", "created_utc": 1308894712.0, "num_comments": 0, "ups": 11}}, {"kind": "t3", "data": {"domain": "self.Python", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I'm looking into different free software video platforms such as &lt;a href=\"http://www.kaltura.org/\" &gt;Kaltura&lt;/a&gt; that enable user-driven media sites.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.mirocommunity.org/\" &gt;Miro community&lt;/a&gt; is a cool project, but actually just embeds videos from other sites.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://mediacore.com/\" &gt;MediaCore&lt;/a&gt; and &lt;a href=\"http://clip-bucket.com/\" &gt;ClipBucket&lt;/a&gt; are also similar to Kaltura, but i think Kaltura is the best option so far (supports HTML5 with Ogg Theora and WebM).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;I'm just wondering if there are other/better/sleeker options out there, perhaps in python?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It'd be interesting to see such a platform also support other media types such as images, audio, etc. Then it would be more like an open source DeviantArt or &lt;a href=\"http://spreadubuntu.org/\" &gt;SpreadUbuntu&lt;/a&gt;, but not specific to Ubuntu.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm looking into different free software video platforms such as [Kaltura](http://www.kaltura.org/) that enable user-driven media sites. \n\n[Miro community](http://www.mirocommunity.org/) is a cool project, but actually just embeds videos from other sites. \n\n[MediaCore](http://mediacore.com/) and [ClipBucket](http://clip-bucket.com/) are also similar to Kaltura, but i think Kaltura is the best option so far (supports HTML5 with Ogg Theora and WebM). \n\n**I'm just wondering if there are other/better/sleeker options out there, perhaps in python?**\n\nIt'd be interesting to see such a platform also support other media types such as images, audio, etc. Then it would be more like an open source DeviantArt or [SpreadUbuntu](http://spreadubuntu.org/), but not specific to Ubuntu. \n\nThanks! ", "likes": null, "saved": false, "id": "i7wvc", "clicked": false, "author": "TheSilentNumber", "media": null, "score": 3, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 1, "is_self": true, "permalink": "/r/Python/comments/i7wvc/free_software_video_platform_like_a_hostyourown/", "name": "t3_i7wvc", "created": 1308928499.0, "url": "http://www.reddit.com/r/Python/comments/i7wvc/free_software_video_platform_like_a_hostyourown/", "title": "Free software video platform (like a host-your-own YouTube)?", "created_utc": 1308903299.0, "num_comments": 2, "ups": 4}}, {"kind": "t3", "data": {"domain": "code.google.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i7kw1", "clicked": false, "author": "roger_", "media": null, "score": 17, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 2, "is_self": false, "permalink": "/r/Python/comments/i7kw1/matplotlibqt4mod_a_qt4_backend_mod_to_improve/", "name": "t3_i7kw1", "created": 1308893448.0, "url": "http://code.google.com/p/matplotlib-qt4mod/", "title": "matplotlib-qt4mod: a Qt4 backend mod to improve interactive plotting in matplotlib", "created_utc": 1308868248.0, "num_comments": 2, "ups": 19}}, {"kind": "t3", "data": {"domain": "self.Python", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Right now I use Aquamacs but I'm getting sick of how damn hard it is to change settings and such, and indentation keeps getting wacky on me.\nIs there a nice graphical interface I can do all of what I want from?&lt;/p&gt;&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Right now I use Aquamacs but I'm getting sick of how damn hard it is to change settings and such, and indentation keeps getting wacky on me.\nIs there a nice graphical interface I can do all of what I want from?", "likes": null, "saved": false, "id": "i7bjw", "clicked": false, "author": "Lolologist", "media": null, "score": 39, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 8, "is_self": true, "permalink": "/r/Python/comments/i7bjw/what_should_i_do_my_editing_in/", "name": "t3_i7bjw", "created": 1308874990.0, "url": "http://www.reddit.com/r/Python/comments/i7bjw/what_should_i_do_my_editing_in/", "title": "What should I do my editing in?", "created_utc": 1308849790.0, "num_comments": 111, "ups": 47}}, {"kind": "t3", "data": {"domain": "asktherelic.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i74lb", "clicked": false, "author": "stivnan", "media": null, "score": 26, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 0, "is_self": false, "permalink": "/r/Python/comments/i74lb/fabric_for_python_automation/", "name": "t3_i74lb", "created": 1308860257.0, "url": "http://asktherelic.com/2011/06/22/fabric-for-python-automation/", "title": "Fabric for Python Automation", "created_utc": 1308835057.0, "num_comments": 0, "ups": 26}}, {"kind": "t3", "data": {"domain": "github.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i7251", "clicked": false, "author": "vijayshan", "media": null, "score": 33, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 3, "is_self": false, "permalink": "/r/Python/comments/i7251/datatree_a_new_dsl_for_creating_structured/", "name": "t3_i7251", "created": 1308851194.0, "url": "https://github.com/bigjason/datatree", "title": "DataTree: A new DSL for creating structured documents", "created_utc": 1308825994.0, "num_comments": 23, "ups": 36}}, {"kind": "t3", "data": {"domain": "self.Python", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Normally, I use a counter and increment it with each loop, and then print it. Is there a better way to make a quick progress indicator?&lt;/p&gt;&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Normally, I use a counter and increment it with each loop, and then print it. Is there a better way to make a quick progress indicator?", "likes": null, "saved": false, "id": "i7jj4", "clicked": false, "author": "the_cat_kittles", "media": null, "score": 3, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 2, "is_self": true, "permalink": "/r/Python/comments/i7jj4/progress_indicator_for_scripts/", "name": "t3_i7jj4", "created": 1308890515.0, "url": "http://www.reddit.com/r/Python/comments/i7jj4/progress_indicator_for_scripts/", "title": "Progress indicator for scripts", "created_utc": 1308865315.0, "num_comments": 8, "ups": 5}}, {"kind": "t3", "data": {"domain": "sitepoint.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i7q83", "clicked": false, "author": "jestinjoy", "media": null, "score": 1, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 1, "is_self": false, "permalink": "/r/Python/comments/i7q83/todo_list_with_django_in_30_minutes/", "name": "t3_i7q83", "created": 1308906503.0, "url": "http://www.sitepoint.com/build-to-do-list-30-minutes/", "title": "To-Do List with Django in 30 minutes", "created_utc": 1308881303.0, "num_comments": 3, "ups": 2}}, {"kind": "t3", "data": {"domain": "packages.python.org", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i6ux3", "clicked": false, "author": "another_user_name", "media": null, "score": 47, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 4, "is_self": false, "permalink": "/r/Python/comments/i6ux3/spyder_a_scientific_python_ide_with_matplotlib/", "name": "t3_i6ux3", "created": 1308827565.0, "url": "http://packages.python.org/spyder/", "title": "Spyder -- A Scientific Python IDE with matplotlib, IPython and numpy integration", "created_utc": 1308802365.0, "num_comments": 10, "ups": 51}}, {"kind": "t3", "data": {"domain": "wefearchange.org", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i74wi", "clicked": false, "author": "gthank", "media": null, "score": 6, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 1, "is_self": false, "permalink": "/r/Python/comments/i74wi/pep_382_sprint_summary/", "name": "t3_i74wi", "created": 1308861080.0, "url": "http://www.wefearchange.org/2011/06/pep-382-sprint-summary.html", "title": "PEP 382 sprint summary", "created_utc": 1308835880.0, "num_comments": 0, "ups": 7}}, {"kind": "t3", "data": {"domain": "self.Python", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I've installed Django, Python-dev, Apache-dev, and mod_wsgi on the webserver. I copied over all my files with updated static links for the db and template directory, I wrote a .wsgi script according to how the wsgi site said when working with django. I know Apache is loading the module, but it's erroring out. In fact it brought all the other sites down with \"Internal Server Error\" 500 until I diabled the new site. Can someone point me in the direction of what I'm supposed to do? What do you need me to post for you to see my screw ups?&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance.&lt;/p&gt;&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've installed Django, Python-dev, Apache-dev, and mod_wsgi on the webserver. I copied over all my files with updated static links for the db and template directory, I wrote a .wsgi script according to how the wsgi site said when working with django. I know Apache is loading the module, but it's erroring out. In fact it brought all the other sites down with \"Internal Server Error\" 500 until I diabled the new site. Can someone point me in the direction of what I'm supposed to do? What do you need me to post for you to see my screw ups?\n\nThanks in advance.", "likes": null, "saved": false, "id": "i7k9c", "clicked": false, "author": "thisisawkward", "media": null, "score": 2, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 1, "is_self": true, "permalink": "/r/Python/comments/i7k9c/xposted_from_rdjango_im_new_at_this_i_built_a/", "name": "t3_i7k9c", "created": 1308892052.0, "url": "http://www.reddit.com/r/Python/comments/i7k9c/xposted_from_rdjango_im_new_at_this_i_built_a/", "title": "x-posted from r/Django: I'm new at this. I built a basic blog site which works completely on my local box, but can't for the life me get it to work along side Apache on my webserver", "created_utc": 1308866852.0, "num_comments": 5, "ups": 3}}, {"kind": "t3", "data": {"domain": "eveonline.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i6axp", "clicked": false, "author": "RobotAdam", "media": null, "score": 79, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 5, "is_self": false, "permalink": "/r/Python/comments/i6axp/eve_online_carbonio_and_bluenet_next_level/", "name": "t3_i6axp", "created": 1308785160.0, "url": "http://www.eveonline.com/devblog.asp?a=blog&amp;bid=925", "title": "EVE Online: CarbonIO and BlueNet: next level network technology (Stackless Python)", "created_utc": 1308759960.0, "num_comments": 4, "ups": 84}}, {"kind": "t3", "data": {"domain": "scribd.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i63eq", "clicked": false, "author": "mitsuhiko", "media": null, "score": 96, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 16, "is_self": false, "permalink": "/r/Python/comments/i63eq/5_years_of_bad_ideas_bytecode_hacks/", "name": "t3_i63eq", "created": 1308764621.0, "url": "http://www.scribd.com/doc/58306088/Bad-Ideas", "title": "5 Years of Bad Ideas \u2014 bytecode hacks, monkeypatching, import hooks and more. EuroPython Talk", "created_utc": 1308739421.0, "num_comments": 29, "ups": 112}}, {"kind": "t3", "data": {"domain": "lostinjit.blogspot.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i6ah1", "clicked": false, "author": "kingkilr", "media": null, "score": 12, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 1, "is_self": false, "permalink": "/r/Python/comments/i6ah1/making_things_happen_one_unittest_at_a_time/", "name": "t3_i6ah1", "created": 1308784143.0, "url": "http://lostinjit.blogspot.com/2011/06/making-things-happen-one-unittest-at.html", "title": "Making things happen one unittest at a time", "created_utc": 1308758943.0, "num_comments": 0, "ups": 13}}, {"kind": "t3", "data": {"domain": "groups.google.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i64zu", "clicked": false, "author": "_mayo", "media": null, "score": 8, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 0, "is_self": false, "permalink": "/r/Python/comments/i64zu/announcing_tornado_20/", "name": "t3_i64zu", "created": 1308745646.0, "url": "http://groups.google.com/group/python-tornado/browse_thread/thread/9d428eb487a37aed", "title": "Announcing Tornado 2.0", "created_utc": 1308745646.0, "num_comments": 1, "ups": 8}}, {"kind": "t3", "data": {"domain": "groups.google.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i5y1w", "clicked": false, "author": "gst", "media": null, "score": 20, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 3, "is_self": false, "permalink": "/r/Python/comments/i5y1w/gcc_python_plugin_and_static_analyser_for_cpython/", "name": "t3_i5y1w", "created": 1308744576.0, "url": "http://groups.google.com/group/comp.lang.python.announce/browse_thread/thread/e6a5097786f46055/83d38683f3eb88d0?show_docid=83d38683f3eb88d0&amp;pli=1", "title": "gcc python plugin and static analyser for CPython sources ", "created_utc": 1308719376.0, "num_comments": 0, "ups": 23}}, {"kind": "t3", "data": {"domain": "groups.google.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i5uso", "clicked": false, "author": "gst", "media": null, "score": 20, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 5, "is_self": false, "permalink": "/r/Python/comments/i5uso/harmattan_python_is_available_offers_the_most/", "name": "t3_i5uso", "created": 1308737093.0, "url": "http://groups.google.com/group/comp.lang.python.announce/browse_thread/thread/3fecfbe1b7ef36ac/a0783ce1d0d8b16d?show_docid=a0783ce1d0d8b16d", "title": "Harmattan Python is available - offers the most\ncomplete and full-featured Python programming language support on any mobile\nplatform.", "created_utc": 1308711893.0, "num_comments": 4, "ups": 25}}, {"kind": "t3", "data": {"domain": "self.Python", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi Reddit,&lt;/p&gt;\n\n&lt;p&gt;I'm currently playing with python and clojure, and as a pet project I found interesting to dig more about this little box which allow us to open a door to some knowledge.&lt;/p&gt;\n\n&lt;p&gt;My first step so far was to tokenise the input from an user by splitting the content. Here is a very simplified example but very close to what I did.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def tokenise(self, sanitised_input):\n    return sanitised_input.split()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I'm not sure if this is the right method...It would be inefficient to parse I imagine a sentence, eg \"How to do something\". I've heard of NLTK, would it be a good start to handle the text submitted by someone? Eg trying to determine if what was entered was a series a keywords or a sentence.&lt;/p&gt;\n\n&lt;p&gt;In the same fashion, I'm wondering if using regex would be enough to handle special keywords as in duckduckgo with the !bang syntax.&lt;/p&gt;\n\n&lt;p&gt;Do you know any OSS project where I can learn some tricks?&lt;/p&gt;\n\n&lt;p&gt;Thanks for your help.&lt;/p&gt;&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi Reddit,\n\nI'm currently playing with python and clojure, and as a pet project I found interesting to dig more about this little box which allow us to open a door to some knowledge.\n\nMy first step so far was to tokenise the input from an user by splitting the content. Here is a very simplified example but very close to what I did.\n\n    def tokenise(self, sanitised_input):\n        return sanitised_input.split()\n\nI'm not sure if this is the right method...It would be inefficient to parse I imagine a sentence, eg \"How to do something\". I've heard of NLTK, would it be a good start to handle the text submitted by someone? Eg trying to determine if what was entered was a series a keywords or a sentence.\n\nIn the same fashion, I'm wondering if using regex would be enough to handle special keywords as in duckduckgo with the !bang syntax.\n\nDo you know any OSS project where I can learn some tricks?\n\nThanks for your help.", "likes": null, "saved": false, "id": "i6fuc", "clicked": false, "author": "geoke", "media": null, "score": 1, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 1, "is_self": true, "permalink": "/r/Python/comments/i6fuc/how_to_code_the_search_field_in_a_search_engine/", "name": "t3_i6fuc", "created": 1308794578.0, "url": "http://www.reddit.com/r/Python/comments/i6fuc/how_to_code_the_search_field_in_a_search_engine/", "title": "How to code the search field in a search engine", "created_utc": 1308769378.0, "num_comments": 4, "ups": 2}}, {"kind": "t3", "data": {"domain": "stackoverflow.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i5nmw", "clicked": false, "author": "mtrn", "media": null, "score": 24, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 2, "is_self": false, "permalink": "/r/Python/comments/i5nmw/is_a_variable_defined_within_a_withstatement/", "name": "t3_i5nmw", "created": 1308720379.0, "url": "http://stackoverflow.com/q/6432355/89391", "title": "Is a variable defined within a with-statement available outside the with block?", "created_utc": 1308695179.0, "num_comments": 14, "ups": 26}}, {"kind": "t3", "data": {"domain": "self.Python", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i66v2", "clicked": false, "author": "trevorx2500", "media": null, "score": 0, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 6, "is_self": true, "permalink": "/r/Python/comments/i66v2/for_python_operations_within_web_page_which_is/", "name": "t3_i66v2", "created": 1308776064.0, "url": "http://www.reddit.com/r/Python/comments/i66v2/for_python_operations_within_web_page_which_is/", "title": "For Python operations within web page which is best, take form data from MySQL ,  from CSV file, or from other?", "created_utc": 1308750864.0, "num_comments": 2, "ups": 3}}, {"kind": "t3", "data": {"domain": "bbc.co.uk", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i5jg5", "clicked": false, "author": "adamcollard", "media": null, "score": 22, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 31, "is_self": false, "permalink": "/r/Python/comments/i5jg5/es_not_the_messiah_es_a_very_naughty_boy/", "name": "t3_i5jg5", "created": 1308711853.0, "url": "http://www.bbc.co.uk/news/entertainment-arts-13856561", "title": "'e's not the Messiah, 'e's a very naughty boy!", "created_utc": 1308686653.0, "num_comments": 11, "ups": 53}}, {"kind": "t3", "data": {"domain": "technicaldiscovery.blogspot.com", "media_embed": {}, "levenshtein": null, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "saved": false, "id": "i57ji", "clicked": false, "author": "gst", "media": null, "score": 57, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "downs": 4, "is_self": false, "permalink": "/r/Python/comments/i57ji/speeding_up_python_numpy_cython_and_weave/", "name": "t3_i57ji", "created": 1308660216.0, "url": "http://technicaldiscovery.blogspot.com/2011/06/speeding-up-python-numpy-cython-and.html", "title": "Speeding up Python (NumPy, Cython, and Weave)", "created_utc": 1308660216.0, "num_comments": 16, "ups": 61}}], "after": "t3_i57ji", "before": null}}